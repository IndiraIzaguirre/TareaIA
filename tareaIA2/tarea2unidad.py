# -*- coding: utf-8 -*-
"""Tarea2Unidad.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JgSE8eFSiJn5NKrIcH3BU6Vb3-qQUm6m
"""

# Importar librerías necesarias
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

datos = pd.read_csv('U4_01_housing.csv')

# Eliminar nulos
datos_na = datos.dropna()

datos.fillna(datos.mean(), inplace=True)

# Crear variables dummy y eliminar la primera columna
dummies = pd.get_dummies(datos_na['ocean_proximity'], dtype=int, drop_first=True)
datos_na = datos_na.join(dummies)
datos_na = datos_na.drop(['ocean_proximity'], axis=1)

sns.set(rc={'figure.figsize': (15, 8)})
sns.heatmap(data=datos_na.corr(), annot=True, cmap='YlGnBu')

datos_na['median_house_value_median_income_ratio'] = datos_na['median_house_value'] / datos_na['median_income']

# Separar características y variable objetivo
X = datos_na.drop(['median_house_value'], axis=1)
y = datos_na['median_house_value']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

modelo = LinearRegression()
modelo.fit(X_train, y_train)

predicciones = modelo.predict(X_test)

mse = mean_squared_error(y_test, predicciones)
r2 = r2_score(y_test, predicciones)

modelo.score(X_test, y_test)

modelo.score(X_train, y_train)

# Mostrar resultados
print(f'Mean Squared Error (MSE): {mse:.4f}')
print(f'R-squared (R²): {r2:.4f}')
print(f'Coeficiente de determinación en el conjunto de prueba: {modelo.score(X_test, y_test):.4f}')
print(f'Coeficiente de determinación en el conjunto de entrenamiento: {modelo.score(X_train, y_train):.4f}')

#¿El resultado fue mejor o peor?
#mejor llegando a un 85%.

#¿Por qué crees que es así?
#Se introdujo una nueva columna que calcula la proporción entre median_house_value y median_income,
#y se aplicó un proceso de estandarización en los datos con el objetivo de minimizar las disparidades entre los valores.